import numpy as np
import matplotlib.pylab as plt
from mpl_toolkits.mplot3d import Axes3D

x0 = np.arange(-2, 2.5, 0.25)
x1 = np.arange(-2, 2.5, 0.25)
X, Y = np.meshgrid(x0,x1)    
X = X.flatten()
Y = Y.flatten()

def gradient_descent(init_x, lr=0.01, step_num=100):
    x=init_x
    for i in range(step_num):
        grad=numerical_gradient(x)
        x-=lr*grad

    return x

def _numerical_gradient_no_batch(x):
    h = 1e-4  
    grad = np.zeros_like(x)
    for idx in range(x.size):
        tmp_val = x[idx]
        x[idx] = tmp_val + h
        fxh1 = f(x)  # f(x+h)
        
        x[idx] = tmp_val - h 
        fxh2 = f(x)  # f(x-h)
        grad[idx] = (fxh1 - fxh2) / (2*h)
        
        x[idx] = tmp_val  # 値を元に戻す
        
    return grad


def numerical_gradient(X):
    grad = np.zeros_like(X)
        
    #矢印
    # for idx, x in enumerate(X):
    #     grad[idx] = _numerical_gradient_no_batch(x)
        
    #勾配法
    grad=_numerical_gradient_no_batch(X)

    return grad


def f(x):
    return np.sum(x**2)

init=np.array([-3.0, 4.0])
ans=gradient_descent(init, 0.1, 100)
print(ans)

# plt.figure()
# plt.quiver(X, Y, -grad[0], -grad[1], color="#ff0000")
# plt.xlim([-5, 5])
# plt.ylim([-5, 5])
# plt.xlabel('x0')
# plt.ylabel('x1')
# plt.grid()
# plt.draw()
# plt.show()
